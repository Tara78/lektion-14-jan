{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Bob\\\\Documents\\\\GitHub\\\\lektion-14-jan\\\\react-hooks-example\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react'; //Importerar vår pokemon.json för att kunna använda i denna fil\n\nimport pokemon from './assets/pokemon.json';\nimport Pokemon from './components/Pokemon';\nimport FavoritePokemon from './components/FavoritePokemon';\n/**\r\n * 1. Importera vår pokemon-fil\r\n * 2. Lägga till våra pokemons i ett state med useState\r\n * 3. Visa alla pokemon på sidan\r\n * 4. Det ska gå att spara sina favoritpokemon\r\n *    a. Lägg till ett klick-event på varje pokemon\r\n *    b. När vi klickar på en pokemon spara i ett annat state med useState\r\n *    c. Visa alla favoritpokemon\r\n */\n\nfunction App() {\n  _s();\n\n  console.log(pokemon); //Sätt pokemons-arrayen i ett state\n\n  const [pokemons, setPokemons] = useState(pokemon); //State för att spara favoritpokemon\n\n  const [favorites, setFavorites] = useState([]);\n  const [pokemonsFromAPI, setPokemonsFromAPI] = useState([]); //useEffect körs när ens state har uppdaterats\n\n  useEffect(() => {\n    console.log('useEffect körs när ens state uppdateras');\n  }); //useEffect körs enbart en gång vid sidladdning\n\n  useEffect(async () => {\n    const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=10&offset=10');\n    const data = await response.json();\n    setPokemonsFromAPI(data.results);\n  }, []); //useEffect körs enbart när favorites uppdateras\n\n  useEffect(() => {\n    alert('Favoriter har uppdateras');\n  }, [favorites]);\n\n  function updateFavorites(pokemon) {\n    //Uppdatera vårt state där vi hämtar nuvarande state och sedan använder vi array metoden\n    //concat för att lägga till den senaste pokemonen som valts som sedan returnerar en ny array\n    //Som vårt state uppdateras med.\n    setFavorites(favorites => favorites.concat(pokemon));\n  }\n\n  function removeFavorite(pokemon) {\n    console.log('Pokemon att ta bort: ', pokemon); //Returnera alla pokemon i favorites som inte har samma id som den pokemon vi vill ta bort\n\n    const newFavorites = favorites.filter(favorite => favorite.id !== pokemon.id);\n    setFavorites(newFavorites);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Pokemons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), pokemons.map(pokemon => {\n        return /*#__PURE__*/_jsxDEV(Pokemon, {\n          pokeObj: pokemon,\n          updateState: updateFavorites\n        }, pokemon.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Favoriter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), favorites.map(favorite => {\n        return /*#__PURE__*/_jsxDEV(FavoritePokemon, {\n          pokeObj: favorite,\n          remove: removeFavorite\n        }, favorite.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lu6K1j9TrXEGcjcbqTuzXPGV3vk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Bob/Documents/GitHub/lektion-14-jan/react-hooks-example/src/App.js"],"names":["React","useState","useEffect","pokemon","Pokemon","FavoritePokemon","App","console","log","pokemons","setPokemons","favorites","setFavorites","pokemonsFromAPI","setPokemonsFromAPI","response","fetch","data","json","results","alert","updateFavorites","concat","removeFavorite","newFavorites","filter","favorite","id","map"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACbC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EADa,CAEb;;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACE,OAAD,CAAxC,CAHa,CAIb;;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD,CANa,CAQb;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAFQ,CAAT,CATa,CAab;;AACAN,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,kBAAkB,CAACG,IAAI,CAACE,OAAN,CAAlB;AACD,GALQ,EAKN,EALM,CAAT,CAda,CAqBb;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,KAAK,CAAC,0BAAD,CAAL;AACD,GAFQ,EAEN,CAACT,SAAD,CAFM,CAAT;;AAKA,WAASU,eAAT,CAAyBlB,OAAzB,EAAkC;AAChC;AACA;AACA;AACAS,IAAAA,YAAY,CAACD,SAAS,IAAIA,SAAS,CAACW,MAAV,CAAiBnB,OAAjB,CAAd,CAAZ;AACD;;AAED,WAASoB,cAAT,CAAwBpB,OAAxB,EAAiC;AAC/BI,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCL,OAArC,EAD+B,CAE/B;;AACA,UAAMqB,YAAY,GAAGb,SAAS,CAACc,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBxB,OAAO,CAACwB,EAArD,CAArB;AACAf,IAAAA,YAAY,CAACY,YAAD,CAAZ;AACD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAC,KAAnB;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEEf,QAAQ,CAACmB,GAAT,CAAczB,OAAD,IAAa;AAC1B,4BAAO,QAAC,OAAD;AAAS,UAAA,OAAO,EAAGA,OAAnB;AAAgD,UAAA,WAAW,EAAGkB;AAA9D,WAAmClB,OAAO,CAACwB,EAA3C;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFC,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEEhB,SAAS,CAACiB,GAAV,CAAeF,QAAD,IAAc;AAC5B,4BAAO,QAAC,eAAD;AAAiB,UAAA,OAAO,EAAGA,QAA3B;AAA0D,UAAA,MAAM,EAAGH;AAAnE,WAA4CG,QAAQ,CAACC,EAArD;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFC,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAzDQrB,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\n//Importerar vår pokemon.json för att kunna använda i denna fil\r\nimport pokemon from './assets/pokemon.json';\r\n\r\nimport Pokemon from './components/Pokemon';\r\nimport FavoritePokemon from './components/FavoritePokemon';\r\n\r\n/**\r\n * 1. Importera vår pokemon-fil\r\n * 2. Lägga till våra pokemons i ett state med useState\r\n * 3. Visa alla pokemon på sidan\r\n * 4. Det ska gå att spara sina favoritpokemon\r\n *    a. Lägg till ett klick-event på varje pokemon\r\n *    b. När vi klickar på en pokemon spara i ett annat state med useState\r\n *    c. Visa alla favoritpokemon\r\n */\r\n\r\nfunction App() {\r\n  console.log(pokemon);\r\n  //Sätt pokemons-arrayen i ett state\r\n  const [pokemons, setPokemons] = useState(pokemon);\r\n  //State för att spara favoritpokemon\r\n  const [favorites, setFavorites] = useState([]);\r\n  const [pokemonsFromAPI, setPokemonsFromAPI] = useState([]);\r\n\r\n  //useEffect körs när ens state har uppdaterats\r\n  useEffect(() => {\r\n    console.log('useEffect körs när ens state uppdateras');\r\n  });\r\n\r\n  //useEffect körs enbart en gång vid sidladdning\r\n  useEffect(async () => {\r\n    const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=10&offset=10');\r\n    const data = await response.json();\r\n\r\n    setPokemonsFromAPI(data.results);\r\n  }, []);\r\n\r\n  //useEffect körs enbart när favorites uppdateras\r\n  useEffect(() => {\r\n    alert('Favoriter har uppdateras');\r\n  }, [favorites]);\r\n\r\n\r\n  function updateFavorites(pokemon) {\r\n    //Uppdatera vårt state där vi hämtar nuvarande state och sedan använder vi array metoden\r\n    //concat för att lägga till den senaste pokemonen som valts som sedan returnerar en ny array\r\n    //Som vårt state uppdateras med.\r\n    setFavorites(favorites => favorites.concat(pokemon));\r\n  }\r\n\r\n  function removeFavorite(pokemon) {\r\n    console.log('Pokemon att ta bort: ', pokemon);\r\n    //Returnera alla pokemon i favorites som inte har samma id som den pokemon vi vill ta bort\r\n    const newFavorites = favorites.filter(favorite => favorite.id !== pokemon.id);\r\n    setFavorites(newFavorites);\r\n  }\r\n\r\n  return (\r\n    <section className=\"App\">\r\n      <section>\r\n        <h2>Pokemons</h2>\r\n      { pokemons.map((pokemon) => {\r\n        return <Pokemon pokeObj={ pokemon } key={ pokemon.id } updateState={ updateFavorites } />\r\n      })}\r\n      </section>\r\n      <section>\r\n        <h2>Favoriter</h2>\r\n      { favorites.map((favorite) => {\r\n        return <FavoritePokemon pokeObj={ favorite } key={ favorite.id } remove={ removeFavorite } />\r\n      })}\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}